{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","state","response","post","responseToPost","callApi","a","fetch","json","body","status","Error","message","jwtResponse","method","headers","JSON","stringify","text","setState","this","then","res","express","catch","err","console","log","className","src","logo","alt","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","module","exports"],"mappings":"iTAkEeA,G,kNA5DbC,MAAQ,CACNC,SAAU,GACVC,KAAM,GACNC,eAAgB,I,EAUlBC,Q,sBAAU,8BAAAC,EAAA,sEACeC,MAAM,UADrB,cACFL,EADE,gBAEWA,EAASM,OAFpB,UAEFC,EAFE,OAGgB,MAApBP,EAASQ,OAHL,sBAG2BC,MAAMF,EAAKG,SAHtC,gCAKDH,GALC,2C,EAQVI,Y,sBAAc,8BAAAP,EAAA,sEAEWC,MAAM,aAAc,CACzCO,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBN,KAAMO,KAAKC,UAAU,CAAEd,KAAM,EAAKF,MAAME,SAP9B,cAEND,EAFM,gBASOA,EAASgB,OAThB,OASNT,EATM,OAWZ,EAAKU,SAAS,CAAEf,eAAgBK,IAXpB,2C,kEAfO,IAAD,OAClBW,KAAKf,UACFgB,MAAK,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAAEjB,SAAUoB,EAAIC,aAC1CC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BA2B5B,OACE,yBAAKG,UAAU,OACb,4BAAQA,UAAU,cAChB,+CAEA,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAEzC,uBAAGH,UAAU,WAAWI,KAAK,6BAA6BC,OAAO,SAASC,IAAI,uBAA9E,qCAMA,uBAAGF,KAAK,mJAAkJ,kDAE1J,2BAAIZ,KAAKnB,MAAMC,UACf,2BAAIkB,KAAKnB,MAAMG,sB,GArDP+B,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLzB,QAAQyB,MAAMA,EAAMvC,a,kBEzI5BwC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.5bbf123e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    response: '',\n    post: '',\n    responseToPost: '',\n  };\n  \n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err));\n\n  }\n  \n  callApi = async () => {\n    const response = await fetch('/hello');\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n    \n    return body;\n  };\n  \n  jwtResponse = async () => {\n    // e.preventDefault();\n    const response = await fetch('/jwtparser', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ post: this.state.post }),\n    });\n    const body = await response.text();\n    \n    this.setState({ responseToPost: body });\n  };\n  \nrender() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2>Dummy React App</h2>\n\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n         \n          <a className=\"App-link\" href=\"https://www.miniOrange.com\" target=\"_blank\" rel=\"noopener noreferrer\" >\n            miniOrange React App Demo for SSO\n          </a>\n\n          {/* <a href=\"https://sunny.miniorange.in/moas/broker/login/jwt/51896?client_id=YIQieyV4Vjyblo5Q&redirect_uri=http://localhost:5000/jwtparser\"><button>Login via SSO</button></a> */}\n\n          <a href=\"https://minitech.xecurify.com/moas/broker/login/jwt/227493?client_id=ipXeoGMgjJNk05O9&redirect_uri=http://demo.miniorange.com/react-2/jwtparser\"><button>Login via SSO</button></a>\n               \n          <p>{this.state.response}</p>\n          <p>{this.state.responseToPost}</p>\n        </header>\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}